# VideoLingo CI/CD Test Workflow

name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11"]
        exclude:
          # Exclude some combinations to reduce CI load
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install ffmpeg on Windows
        choco install ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Create test configuration
      run: |
        mkdir -p test_config
        echo "api:
          key: 'test-api-key'
          base_url: 'https://api.openai.com/v1'
          model: 'gpt-4'
        paths:
          input: 'test_config/input'
          temp: 'test_config/temp'
          output: 'test_config/output'
        " > test_config/config.yaml

    - name: Run unit tests
      run: |
        python tests/test_runner.py unit --verbose

    - name: Run integration tests (non-network)
      run: |
        python tests/test_runner.py integration --verbose
      env:
        VIDEOLINGO_TEST_MODE: 1

    - name: Generate coverage report
      run: |
        python tests/test_runner.py --coverage-only

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/reports/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          tests/reports/
          !tests/reports/coverage_html/

  network-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[test-network]')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Run network tests
      run: |
        python tests/test_runner.py network --verbose
      env:
        # Add API keys for network tests (use GitHub secrets)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        VIDEOLINGO_API_KEY: ${{ secrets.VIDEOLINGO_API_KEY }}

  gpu-tests:
    runs-on: [self-hosted, gpu]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[test-gpu]')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Run GPU tests
      run: |
        python tests/test_runner.py gpu --verbose
      env:
        CUDA_VISIBLE_DEVICES: 0

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt tests/requirements-test.txt

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r core/ -f json -o security-report.json
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.json

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        python tests/test_runner.py --performance

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: tests/reports/benchmark.json

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Check code formatting
      run: |
        black --check core/ tests/

    - name: Check import sorting
      run: |
        isort --check-only core/ tests/

    - name: Run linting
      run: |
        flake8 core/ tests/

    - name: Run type checking
      run: |
        mypy core/ --ignore-missing-imports

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Check for outdated dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-check-reqs
        pip-check-reqs requirements.txt
        pip-check-reqs tests/requirements-test.txt

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check -r requirements.txt
        safety check -r tests/requirements-test.txt